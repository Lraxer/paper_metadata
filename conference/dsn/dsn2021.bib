@inproceedings{DBLP:conf/dsn/Chiueh21,
	author = {Tzi{-}cker Chiueh},
	title = {Keynote {I:} Advances in memory state-preserving fault tolerance},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {xxvii--xxxi},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00016},
	doi = {10.1109/DSN48987.2021.00016},
	timestamp = {Mon, 09 Aug 2021 14:59:44 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/Chiueh21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Provides an abstract for each of the keynote presentations and may include a brief professional biography of each presenter. The complete presentations were not made available for publication as part of the conference proceedings.}
}


@inproceedings{DBLP:conf/dsn/ChenLP21,
	author = {Zitao Chen and
                  Guanpeng Li and
                  Karthik Pattabiraman},
	title = {A Low-cost Fault Corrector for Deep Neural Networks through Range
                  Restriction},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {1--13},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00018},
	doi = {10.1109/DSN48987.2021.00018},
	timestamp = {Sun, 04 Aug 2024 19:40:43 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/ChenLP21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {The adoption of deep neural networks (DNNs) in safety-critical domains has engendered serious reliability concerns. A prominent example is hardware transient faults that are growing in frequency due to the progressive technology scaling, and can lead to failures in DNNs. This work proposes Ranger, a low-cost fault corrector, which directly rectifies the faulty output due to transient faults without re-computation. DNNs are inherently resilient to benign faults (which will not cause output corruption), but not to critical faults (which can result in erroneous output). Ranger is an automated transformation to selectively restrict the value ranges in DNNs, which reduces the large deviations caused by critical faults and transforms them to benign faults that can be tolerated by the inherent resilience of the DNNs. Our evaluation on 8 DNNs demonstrates Ranger significantly increases the error resilience of the DNNs (by 3x to 50x), with no loss in accuracy, and with negligible overheads.}
}


@inproceedings{DBLP:conf/dsn/KhanB21,
	author = {Maher Khan and
                  Amy Babay},
	title = {Toward Intrusion Tolerance as a Service: Confidentiality in Partially
                  Cloud-Based {BFT} Systems},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {14--25},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00019},
	doi = {10.1109/DSN48987.2021.00019},
	timestamp = {Sat, 09 Apr 2022 12:43:02 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/KhanB21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Recent work on intrusion-tolerance has shown that resilience to sophisticated network attacks requires system replicas to be deployed across at least three geographically distributed sites. While commodity data centers offer an attractive solution for hosting these sites due to low cost and management overhead, their use raises significant confidentiality concerns: system operators may not want private data or proprietary algorithms exposed to servers outside their direct control. We present a new model for Byzantine Fault Tolerant replicated systems that moves toward “intrusion tolerance as a service”. Under this model, application logic and data are only exposed to servers hosted on the system operator’s premises. Additional offsite servers hosted in data centers can support the needed resilience without executing application logic or accessing unencrypted state. We have implemented this approach in the open-source Spire system, and our evaluation shows that the performance overhead of providing confidentiality can be less than 4% in terms of latency.}
}


@inproceedings{DBLP:conf/dsn/DashLCKP21,
	author = {Pritam Dash and
                  Guanpeng Li and
                  Zitao Chen and
                  Mehdi Karimibiuki and
                  Karthik Pattabiraman},
	title = {PID-Piper: Recovering Robotic Vehicles from Physical Attacks},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {26--38},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00020},
	doi = {10.1109/DSN48987.2021.00020},
	timestamp = {Sun, 04 Aug 2024 19:40:43 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/DashLCKP21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Robotic Vehicles (RV) rely extensively on sensor inputs to operate autonomously. Physical attacks such as sensor tampering and spoofing can feed erroneous sensor measurements to deviate RVs from their course and result in mission failures. In this paper, we present PID-Piper, a novel framework for automatically recovering RVs from physical attacks. We use machine learning (ML) to design an attack resilient Feed-Forward Controller (FFC), which runs in tandem with the RV’s primary controller and monitors it. Under attacks, the FFC takes over from the RV’s primary controller to recover the RV, and allows the RV to complete its mission successfully. Our evaluation on 6 RV systems including 3 real RVs shows that PID-Piper achieves high accuracy in emulating the RV’s controller, in the absence of attacks, with no false positives. Further, PID-Piper allows RVs to complete their missions successfully despite attacks in 83% of the cases, while incurring low performance overheads.}
}


@inproceedings{DBLP:conf/dsn/GuerraouiGPRR21,
	author = {Rachid Guerraoui and
                  Arsany Guirguis and
                  J{\'{e}}r{\'{e}}my Plassmann and
                  Anton Ragot and
                  S{\'{e}}bastien Rouault},
	title = {{GARFIELD:} System Support for Byzantine Machine Learning (Regular
                  Paper)},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {39--51},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00021},
	doi = {10.1109/DSN48987.2021.00021},
	timestamp = {Wed, 07 Dec 2022 23:08:59 +0100},
	biburl = {https://dblp.org/rec/conf/dsn/GuerraouiGPRR21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {We present GARFIELD, a library to transparently make machine learning (ML) applications, initially built with popular (but fragile) frameworks, e.g., TensorFlow and PyTorch, Byzantine–resilient. GARFIELD relies on a novel object–oriented design, reducing the coding effort, and addressing the vulnerability of the shared–graph architecture followed by classical ML frameworks. GARFIELD encompasses various communication patterns and supports computations on CPUs and GPUs, allowing addressing the general question of the practical cost of Byzantine resilience in ML applications. We report on the usage of GARFIELD on three main ML architectures: (a) a single server with multiple workers, (b) several servers and workers, and (c) peer–to–peer settings. Using GARFIELD, we highlight interesting facts about the cost of Byzantine resilience. In particular, (a) Byzantine resilience, unlike crash resilience, induces an accuracy loss, (b) the throughput overhead comes more from communication than from robust aggregation, and (c) tolerating Byzantine servers costs more than tolerating Byzantine workers.}
}


@inproceedings{DBLP:conf/dsn/YuhalaFST21,
	author = {Peterson Yuhala and
                  Pascal Felber and
                  Valerio Schiavoni and
                  Alain Tchana},
	title = {Plinius: Secure and Persistent Machine Learning Model Training},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {52--62},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00022},
	doi = {10.1109/DSN48987.2021.00022},
	timestamp = {Tue, 21 Mar 2023 20:58:54 +0100},
	biburl = {https://dblp.org/rec/conf/dsn/YuhalaFST21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {With the increasing popularity of cloud based machine learning (ML) techniques there comes a need for privacy and integrity guarantees for ML data. In addition, the significant scalability challenges faced by DRAM coupled with the high access-times of secondary storage represent a huge performance bottleneck for ML systems. While solutions exist to tackle the security aspect, performance remains an issue. Persistent memory (PM) is resilient to power loss (unlike DRAM), provides fast and fine-granular access to memory (unlike disk storage) and has latency and bandwidth close to DRAM (in the order of ns and GB/s, respectively). We present PLINIUS, a ML framework using Intel SGX enclaves for secure training of ML models and PM for fault tolerance guarantees. PLINIUS uses a novel mirroring mechanism to create and maintain (i) encrypted mirror copies of ML models on PM, and (ii) encrypted training data in byte-addressable PM, for near-instantaneous data recovery after a system failure. Compared to disk-based checkpointing systems, PLINIUS is 3.2× and 3.7× faster respectively for saving and restoring models on real PM hardware, achieving robust and secure ML model training in SGX enclaves.}
}


@inproceedings{DBLP:conf/dsn/KimAGZANK21,
	author = {Bedeuro Kim and
                  Alsharif Abuadbba and
                  Yansong Gao and
                  Yifeng Zheng and
                  Muhammad Ejaz Ahmed and
                  Surya Nepal and
                  Hyoungshick Kim},
	title = {Decamouflage: {A} Framework to Detect Image-Scaling Attacks on {CNN}},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {63--74},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00023},
	doi = {10.1109/DSN48987.2021.00023},
	timestamp = {Wed, 07 Aug 2024 17:31:10 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/KimAGZANK21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Image-scaling is a typical operation that processes the input image before feeding it into convolutional neural network models. However, it is vulnerable to the newly revealed image-scaling attack. This work presents an image-scaling attack detection framework, Decamouflage, consisting of three independent detection methods: scaling, filtering, and steganalysis, to detect the attack through examining distinct image characteristics. Decamouflage has a pre-determined detection threshold that is generic. More precisely, as we have validated, the threshold determined from one dataset is also applicable to other different datasets. Extensive experiments show that Decamouflage achieves detection accuracy of 99.9% and 98.5% in the white-box and the black-box settings, respectively. We also measured its running time overhead on a PC with an Intel i5 CPU and 8GB RAM. The experimental results show that image-scaling attacks can be detected in milliseconds. Moreover, Decamouflage is highly robust against adaptive image-scaling attacks (e.g., attack image size variances).}
}


@inproceedings{DBLP:conf/dsn/PonaderTKS21,
	author = {Jonathan Ponader and
                  Kyle Thomas and
                  Sandip Kundu and
                  Yan Solihin},
	title = {{MILR:} Mathematically Induced Layer Recovery for Plaintext Space
                  Error Correction of CNNs},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {75--87},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00024},
	doi = {10.1109/DSN48987.2021.00024},
	timestamp = {Mon, 09 Aug 2021 14:59:44 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/PonaderTKS21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {The increased use of Convolutional Neural Networks (CNN) in mission-critical systems has increased the need for robust and resilient networks in the face of both naturally occurring faults as well as security attacks. The lack of robustness and resiliency can lead to unreliable inference results. Current methods that address CNN robustness require hardware modification, network modification, or network duplication. This paper proposes MILR a software-based CNN error detection and error correction system that enables recovery from single and multi-bit errors. The recovery capabilities are based on mathematical relationships between the inputs, outputs, and parameters(weights) of the layers; exploiting these relationships allows the recovery of erroneous parameters (iveights) throughout a layer and the network. MILR is suitable for plaintext-space error correction (PSEC) given its ability to correct whole-weight and even whole-layer errors in CNNs.}
}


@inproceedings{DBLP:conf/dsn/LiLZDLH21,
	author = {Xiang Li and
                  Baojun Liu and
                  Xiaofeng Zheng and
                  Haixin Duan and
                  Qi Li and
                  Youjun Huang},
	title = {Fast IPv6 Network Periphery Discovery and Security Implications},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {88--100},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00025},
	doi = {10.1109/DSN48987.2021.00025},
	timestamp = {Mon, 29 Jul 2024 09:15:25 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/LiLZDLH21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Numerous measurement researches have been performed to discover the IPv4 network security issues by leveraging the fast Internet-wide scanning techniques. However, IPv6 brings the 128-bit address space and renders brute-force network scanning impractical. Although significant efforts have been dedicated to enumerating active IPv6 hosts, limited by technique efficiency and probing accuracy, large-scale empirical measurement studies under the increasing IPv6 networks are infeasible now. To fill this research gap, by leveraging the extensively adopted IPv6 address allocation strategy, we propose a novel IPv6 network periphery discovery approach. Specifically, XMap, a fast network scanner, is developed to find the periphery, such as a home router. We evaluate it on twelve prominent Internet service providers and harvest 52M active peripheries. Grounded on these found devices, we explore IPv6 network risks of the unintended exposed security services and the flawed traffic routing strategies. First, we demonstrate the unintended exposed security services in IPv6 networks, such as DNS, and HTTP, have become emerging security risks by analyzing 4.7M peripheries. Second, by inspecting the periphery’s packet routing strategies, we present the flawed implementations of IPv6 routing protocol affecting 5.8M router devices. Attackers can exploit this common vulnerability to conduct effective routing loop attacks, inducing DoS to the ISP’s and home routers with an amplification factor of \\gt {200}. We responsibly disclose those issues to all involved vendors and ASes and discuss mitigation solutions. Our research results indicate that the security community should revisit IPv6 network strategies immediately.}
}


@inproceedings{DBLP:conf/dsn/BhardwajZB21,
	author = {Ayush Bhardwaj and
                  Zhenyu Zhou and
                  Theophilus A. Benson},
	title = {A Comprehensive Study of Bugs in Software Defined Networks},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {101--115},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00026},
	doi = {10.1109/DSN48987.2021.00026},
	timestamp = {Mon, 09 Aug 2021 14:59:44 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/BhardwajZB21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Software-defined networking (SDN) enables innovative and impressive solutions in the networking domain by decoupling the control plane from the data plane. In an SDN environment, the network control logic for load balancing, routing, and access control is written in software running on a decoupled control plane. As with any software development cycle, the SDN control plane is prone to bugs that impact the network’s performance and availability. Yet, as a community, we lack holistic, in-depth studies of bugs within the SDN ecosystem. A bug taxonomy is one of the most promising ways to lay the foundations required for (1) evaluating and directing emerging research directions on fault detection and recovery, and (2) informing operational practices of network administrators. This paper takes the first step towards laying this foundation by providing a comprehensive study and analysis of over 500 ‘critical’ bugs (including\n∼150\nwith manual analysis) in three of the most widely-used SDN controllers, i.e., FAUCET, ONOS, and CORD. We create a taxonomy of these SDN bugs, analyze their operational impact, and implications for the developers. We use our taxonomy to analyze the effectiveness and coverage of several prominent SDN fault tolerance and diagnosis techniques. This study is the first of its kind in scale and coverage to the best of our knowledge.}
}


@inproceedings{DBLP:conf/dsn/ScherrerLP021,
	author = {Simon Scherrer and
                  Markus Legner and
                  Adrian Perrig and
                  Stefan Schmid},
	title = {Enabling Novel Interconnection Agreements with Path-Aware Networking
                  Architectures},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {116--128},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00027},
	doi = {10.1109/DSN48987.2021.00027},
	timestamp = {Tue, 07 May 2024 20:05:31 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/ScherrerLP021.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Path-aware networks (PANs) are emerging as an intriguing new paradigm with the potential to significantly improve the dependability and efficiency of networks. However, the benefits of PANs can only be realized if the adoption of such architectures is economically viable. This paper shows that PANs enable novel interconnection agreements among autonomous systems, which allow to considerably improve both economic profits and path diversity compared to today’s Internet. Specifically, by supporting packet forwarding along a path selected by the packet source, PANs do not require the Gao–Rexford conditions to ensure stability. Hence, autonomous systems can establish novel agreements, creating new paths which demonstrably improve latency and bandwidth metrics in many cases. This paper also expounds two methods to set up agreements which are Pareto-optimal, fair, and thus attractive to both parties. We further present a bargaining mechanism that allows two parties to efficiently automate agreement negotiations.}
}


@inproceedings{DBLP:conf/dsn/PozoRH21,
	author = {Francisco Pozo and
                  Guillermo Rodr{\'{\i}}guez{-}Navas and
                  Hans Hansson},
	title = {Self-Healing Protocol: Repairing Schedules Online after Link Failures
                  in Time-Triggered Networks},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {129--140},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00028},
	doi = {10.1109/DSN48987.2021.00028},
	timestamp = {Mon, 09 Aug 2021 14:59:44 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/PozoRH21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Switched networks following the time-triggered paradigm rely on static schedules that determine the communication pattern over each link. In order to tolerate link failures, methods based on spatial redundancy and based on resynthesis and replacement of schedules have been proposed. These methods, however, do not scale to larger networks, which may be needed e.g. for future large-scale cyberphysical systems. We propose a distributed Self-Healing Protocol (SHP) that, instead of recomputing the whole schedule, repairs the existent schedule at runtime. For that, it relies on the coordination among the nodes of the network to redefine the repair problem as a number of local synthesis problems of significantly smaller size, which are solved in parallel by the nodes that need to reroute the frames affected by link failures. SHP exhibits a high success rate compared to full rescheduling, as well as remarkable scalability; it repairs the schedule in milliseconds, whereas rescheduling may require minutes for large networks.}
}


@inproceedings{DBLP:conf/dsn/BaumannHSW21,
	author = {Lukas Baumann and
                  Elias Heftrig and
                  Haya Schulmann and
                  Michael Waidner},
	title = {The Master and Parasite Attack},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {141--148},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00029},
	doi = {10.1109/DSN48987.2021.00029},
	timestamp = {Tue, 07 May 2024 20:05:32 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/BaumannHSW21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {We explore a new type of malicious script attacks: the persistent parasite attack. Persistent parasites are stealthy scripts, which persist for a long time in the browser’s cache. We show to infect the caches of victims with parasite scripts via TCP injection.Once the cache is infected, we implement methodologies for propagation of the parasites to other popular domains on the victim client as well as to other caches on the network. We show how to design the parasites so that they stay long time in the victim’s cache not restricted to the duration of the user’s visit to the web site. We develop covert channels for communication between the attacker and the parasites, which allows the attacker to control which scripts are executed and when, and to exfiltrate private information to the attacker, such as cookies and passwords. We then demonstrate how to leverage the parasites to perform sophisticated attacks, and evaluate the attacks against a range of applications and security mechanisms on popular browsers. Finally we provide recommendations for countermeasures.}
}


@inproceedings{DBLP:conf/dsn/WangWF0J21,
	author = {Xinda Wang and
                  Shu Wang and
                  Pengbin Feng and
                  Kun Sun and
                  Sushil Jajodia},
	title = {PatchDB: {A} Large-Scale Security Patch Dataset},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {149--160},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00030},
	doi = {10.1109/DSN48987.2021.00030},
	timestamp = {Mon, 07 Feb 2022 08:00:54 +0100},
	biburl = {https://dblp.org/rec/conf/dsn/WangWF0J21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Security patches, embedding both vulnerable code and the corresponding fixes, are of great significance to vulnerability detection and software maintenance. However, the existing patch datasets suffer from insufficient samples and low varieties. In this paper, we construct a large-scale patch dataset called PatchDB that consists of three components, namely, NVD-based dataset, wild-based dataset, and synthetic dataset. The NVD-based dataset is extracted from the patch hyperlinks indexed by the NVD. The wild-based dataset includes security patches that we collect from the commits on GitHub. To improve the efficiency of data collection and reduce the effort on manual verification, we develop a new nearest link search method to help find the most promising security patch candidates. Moreover, we provide a synthetic dataset that uses a new oversampling method to synthesize patches at the source code level by enriching the control flow variants of original patches. We conduct a set of studies to investigate the effectiveness of the proposed algorithms and evaluate the properties of the collected dataset. The experimental results show that PatchDB can help improve the performance of security patch identification.}
}


@inproceedings{DBLP:conf/dsn/LiSTWL21,
	author = {Qiang Li and
                  Jinke Song and
                  Dawei Tan and
                  Haining Wang and
                  Jiqiang Liu},
	title = {PDGraph: {A} Large-Scale Empirical Study on Project Dependency of
                  Security Vulnerabilities},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {161--173},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00031},
	doi = {10.1109/DSN48987.2021.00031},
	timestamp = {Tue, 16 Jul 2024 20:30:53 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/LiSTWL21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {The reuse of libraries in software development has become prevalent for improving development efficiency and software quality. However, security vulnerabilities of reused libraries propagated through software project dependency pose a severe security threat, but they have not yet been well studied. In this paper, we present the first large-scale empirical study of project dependencies with respect to security vulnerabilities. We developed PDGraph, an innovative approach for analyzing publicly known security vulnerabilities among numerous project dependencies, which provides a new perspective for assessing security risks in the wild. As a large-scale software collection in dependency, we find 337,415 projects and 1,385,338 dependency relations. In particular, PDGraph generates a project dependency graph, where each node is a project, and each edge indicates a dependency relationship. We conducted experiments to validate the efficacy of PDGraph and characterized its features for security analysis. We revealed that 1,014 projects have publicly disclosed vulnerabilities, and more than 67,806 projects are directly dependent on them. Among these, 42,441 projects still manifest 67,581 insecure dependency relationships, indicating that they are built on vulnerable versions of reused libraries even though their vulnerabilities are publicly known. During our eight-month observation period, only 1,266 insecure edges were fixed, and corresponding vulnerable libraries were updated to secure versions. Furthermore, we uncovered four underlying dependency risks that can significantly reduce the difficulty of compromising systems. We conducted a quantitative analysis of dependency risks on the PDGraph.}
}


@inproceedings{DBLP:conf/dsn/KwonWSL21,
	author = {Seongkyeong Kwon and
                  Seunghoon Woo and
                  Gangmo Seong and
                  Heejo Lee},
	title = {{OCTOPOCS:} Automatic Verification of Propagated Vulnerable Code Using
                  Reformed Proofs of Concept},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {174--185},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00032},
	doi = {10.1109/DSN48987.2021.00032},
	timestamp = {Mon, 05 Feb 2024 20:30:57 +0100},
	biburl = {https://dblp.org/rec/conf/dsn/KwonWSL21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Addressing vulnerability propagation has become a major issue in software ecosystems. Existing approaches hold the promise of detecting widespread vulnerabilities but cannot be applied to verify effectively whether propagated vulnerable code still poses threats. We present OCTOPOCS, which uses a reformed Proof-of-Concept (PoC), to verify whether a vulnerability is propagated. Using context-aware taint analysis, OCTOPOCS extracts crash primitives (the parts used in the shared code area between the original vulnerable software and propagated software) from the original PoC. OCTOPOCS then utilizes directed symbolic execution to generate guiding inputs that direct the execution of the propagated software from the entry point to the shared code area. Thereafter, OCTOPOCS creates a new PoC by combining crash primitives and guiding inputs. It finally verifies the propagated vulnerability using the created PoC. We evaluated OCTOPOCS with 15 real-world C and C++ vulnerable software pairs, with results showing that OCTOPOCS successfully verified 14 propagated vulnerabilities.}
}


@inproceedings{DBLP:conf/dsn/DulongPCSRF021,
	author = {R{\'{e}}mi Dulong and
                  Rafael Pires and
                  Andreia Correia and
                  Valerio Schiavoni and
                  Pedro Ramalhete and
                  Pascal Felber and
                  Ga{\"{e}}l Thomas},
	title = {NVCache: {A} Plug-and-Play NVMM-based {I/O} Booster for Legacy Systems},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {186--198},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00033},
	doi = {10.1109/DSN48987.2021.00033},
	timestamp = {Wed, 07 Aug 2024 09:33:39 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/DulongPCSRF021.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {This paper introduces NVCACHE, an approach that uses a non-volatile main memory (NVMM) as a write cache to improve the write performance of legacy applications. We compare NVCACHE against file systems tailored for NVMM (Ext4-DAX and NOVA) and with I/O-heavy applications (SQLite, RocksDB). Our evaluation shows that NVCACHE reaches the performance level of the existing state-of-the-art systems for NVMM, but without their limitations: NVCACHE does not limit the size of the stored data to the size of the NVMM, and works transparently with unmodified legacy applications, providing additional persistence guarantees even when their source code is not available.}
}


@inproceedings{DBLP:conf/dsn/NgoLL21,
	author = {Khiem Ngo and
                  Haonan Lu and
                  Wyatt Lloyd},
	title = {{K2:} Reading Quickly from Storage Across Many Datacenters},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {199--211},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00034},
	doi = {10.1109/DSN48987.2021.00034},
	timestamp = {Mon, 09 Aug 2021 14:59:44 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/NgoLL21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {The infrastructure available to large-scale and medium-scale web services now spans dozens of geographically dispersed datacenters. Deploying across many datacenters has the potential to significantly reduce end-user latency by serving users nearer their location. However, deploying across many datacenters requires the backend storage system be partially replicated. In turn, this can sacrifice the low latency benefits of many datacenters, especially when a storage system provides guarantees on what operations will observe. We present the K2 storage system that provides lower latency for large-scale and medium-scale web services using partial replication of data over many datacenters with strong guarantees: causal consistency, read-only transactions, and write-only transactions. K2 provides the best possible worst-case latency for partial replication, a single round trip to remote datacenters, and often avoids sending any requests to far away datacenters using a novel replication approach, write-only transaction algorithm, and read-only transaction algorithm.}
}


@inproceedings{DBLP:conf/dsn/NevesMV021,
	author = {Francisco Neves and
                  Nuno Machado and
                  Ricardo Vila{\c{c}}a and
                  Jos{\'{e}} Pereira},
	title = {Horus: Non-Intrusive Causal Analysis of Distributed Systems Logs},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {212--223},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00035},
	doi = {10.1109/DSN48987.2021.00035},
	timestamp = {Mon, 03 Jan 2022 22:27:55 +0100},
	biburl = {https://dblp.org/rec/conf/dsn/NevesMV021.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Logs are still the primary resource for debugging distributed systems executions. Complexity and heterogeneity of modern distributed systems, however, make log analysis extremely challenging. First, due to the sheer amount of messages, in which the execution paths of distinct system components appear interleaved. Second, due to unsynchronized physical clocks, simply ordering the log messages by timestamp does not suffice to obtain a causal trace of the execution. To address these issues, we present Horus, a system that enables the refinement of distributed system logs in a causally-consistent and scalable fashion. Horus leverages kernel-level probing to capture events for tracking causality between application-level logs from multiple sources. The events are then encoded as a directed acyclic graph and stored in a graph database, thus allowing the use of rich query languages to reason about runtime behavior. Our case study with TrainTicket, a ticket booking application with 40+ microservices, shows that Horus surpasses current widely-adopted log analysis systems in pinpointing the root cause of anomalies in distributed executions. Also, we show that Horus builds a causally-consistent log of a distributed execution with much higher performance (up to 3 orders of magnitude) and scalability than prior state-of-the-art solutions. Finally, we show that Horus’ approach to query causality is up to 30 times faster than graph database built-in traversal algorithms.}
}


@inproceedings{DBLP:conf/dsn/YangCZLZS21,
	author = {Shouguo Yang and
                  Long Cheng and
                  Yicheng Zeng and
                  Zhe Lang and
                  Hongsong Zhu and
                  Zhiqiang Shi},
	title = {Asteria: Deep Learning-based AST-Encoding for Cross-platform Binary
                  Code Similarity Detection},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {224--236},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00036},
	doi = {10.1109/DSN48987.2021.00036},
	timestamp = {Mon, 01 May 2023 13:01:40 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/YangCZLZS21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Binary code similarity detection is a fundamental technique for many security applications such as vulnerability search, patch analysis, and malware detection. There is an increasing need to detect similar code for vulnerability search across architectures with the increase of critical vulnerabilities in IoT devices. The variety of IoT hardware architectures and software platforms requires to capture semantic equivalence of code fragments in the similarity detection. However, existing approaches are insufficient in capturing the semantic similarity. We notice that the abstract syntax tree (AST) of a function contains rich semantic information. Inspired by successful applications of natural language processing technologies in sentence semantic understanding, we propose a deep learning-based AST-encoding method, named ASTERIA, to measure the semantic equivalence of functions in different platforms. Our method leverages the Tree-LSTM network to learn the semantic representation of a function from its AST. Then the similarity detection can be conducted efficiently and accurately by measuring the similarity between two representation vectors. We have implemented an open-source prototype of ASTERIA. The Tree-LSTM model is trained on a dataset with 1,022,616 function pairs and evaluated on a dataset with 95,078 function pairs. Evaluation results show that our method outperforms the AST-based tool Diaphora and the-state-of-art method Gemini by large margins with respect to the binary similarity detection. And our method is several orders of magnitude faster than Diaphora and Gemini for the similarity calculation. In the application of vulnerability search, our tool successfully identified 75 vulnerable functions in 5,979 IoT firmware images.}
}


@inproceedings{DBLP:conf/dsn/AlharthiJDCC21,
	author = {Khalid Ayedh Alharthi and
                  Arshad Jhumka and
                  Sheng Di and
                  Franck Cappello and
                  Edward Chuah},
	title = {Sentiment Analysis based Error Detection for Large-Scale Systems},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {237--249},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00037},
	doi = {10.1109/DSN48987.2021.00037},
	timestamp = {Mon, 09 Aug 2021 14:59:44 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/AlharthiJDCC21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Today’s large-scale systems such as High Performance Computing (HPC) Systems are designed/utilized towards exascale computing, inevitably decreasing its reliability due to the increasing design complexity. HPC systems conduct extensive logging of their execution behaviour. In this paper, we leverage the inherent meaning behind the log messages and propose a novel sentiment analysis-based approach for the error detection in large-scale systems, by automatically mining the sentiments in the log messages. Our contributions are four-fold. (1) We develop a machine learning (ML) based approach to automatically build a sentiment lexicon, based on the system log message templates. (2) Using the sentiment lexicon, we develop an algorithm to detect system errors. (3) We develop an algorithm to identify the nodes and components with erroneous behaviors, based on sentiment polarity scores. (4) We evaluate our solution vs. other state-of-the-art machine/deep learning algorithms based on three representative supercomputers’ system logs. Experiments show that our error detection algorithm can identify error messages with an average MCC score and f-score of 91% and 96% respectively, while state of the art ML/deep learning model (LSTM) obtains only 67% and 84%. To the best of our knowledge, this is the first work leveraging the sentiments embedded in log entries of large-scale systems for system health analysis.}
}


@inproceedings{DBLP:conf/dsn/YuanCYKZ21,
	author = {Lun{-}Pin Yuan and
                  Euijin Choo and
                  Ting Yu and
                  Issa Khalil and
                  Sencun Zhu},
	title = {Time-Window Based Group-Behavior Supported Method for Accurate Detection
                  of Anomalous Users},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {250--262},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00038},
	doi = {10.1109/DSN48987.2021.00038},
	timestamp = {Sun, 06 Oct 2024 20:59:54 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/YuanCYKZ21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Autoencoder-based anomaly detection methods have been used in identifying anomalous users from large-scale enterprise logs with the assumption that adversarial activities do not follow past habitual patterns. Most existing approaches typically build models by reconstructing single-day and individual-user behaviors. However, without capturing long-term signals and group-correlation signals, the models cannot identify low-signal yet long-lasting threats, and will wrongly report many normal users as anomalies on busy days, which, in turn, lead to high false positive rate. In this paper, we propose ACOBE, an Anomaly detection method based on COmpound BEhavior, which takes into consideration long-term patterns and group behaviors. ACOBE leverages a novel behavior representation and an ensemble of deep autoencoders and produces an ordered investigation list. Our evaluation shows that ACOBE outperforms prior work by a large margin in terms of precision and recall, and our case study demonstrates that ACOBE is applicable in practice for cyberattack detection.}
}


@inproceedings{DBLP:conf/dsn/Xu0LLHL21,
	author = {Fan Xu and
                  Shujie Han and
                  Patrick P. C. Lee and
                  Yi Liu and
                  Cheng He and
                  Jiongzhou Liu},
	title = {General Feature Selection for Failure Prediction in Large-scale {SSD}
                  Deployment},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {263--270},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00039},
	doi = {10.1109/DSN48987.2021.00039},
	timestamp = {Sun, 04 Aug 2024 19:40:43 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/Xu0LLHL21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Solid-state drive (SSD) failures are likely to cause system-level failures leading to downtime, enabling SSD failure prediction to be critical to large-scale SSD deployment. Existing SSD failure prediction studies are mostly based on customized SSDs with proprietary monitoring metrics, which are difficult to reproduce. To support general SSD failure prediction of different drive models and vendors, this paper proposes Wear-out-updating Ensemble Feature Ranking (WEFR) to select the SMART attributes as learning features in an automated and robust manner. WEFR combines different feature ranking results and automatically generates the final feature selection based on the complexity measures and the change point detection of wear-out degrees. We evaluate our approach using a dataset of nearly 500K working SSDs at Alibaba. Our results show that the proposed approach is effective and outperforms related approaches. We have successfully applied the proposed approach to improve the reliability of cloud storage systems in production SSD-based data centers. We release our dataset for public use.}
}


@inproceedings{DBLP:conf/dsn/KadamSJ21,
	author = {Gurunath Kadam and
                  Evgenia Smirni and
                  Adwait Jog},
	title = {Data-centric Reliability Management in GPUs},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {271--283},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00040},
	doi = {10.1109/DSN48987.2021.00040},
	timestamp = {Sat, 30 Sep 2023 09:39:08 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/KadamSJ21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Graphics Processing Units (GPUs) have become the default choice of acceleration in a wide range of application domains. To keep up with computational demands, the GPU memory system is constantly being innovated from both the cache and DRAM perspectives. Such innovations can adversely affect GPU reliability and in fact, can lead to an increase in the number of multi-bit faults. To address this problem, we systematically study a wide range of GPGPU applications and find that usually, only a small percentage of data needs protection to increase application resilience. This data is highly accessed and shared (constitutes hot memory), which implies that faults in this space can often lead to incorrect application output. An in-depth analysis of application code shows that information of such data can be passed on to the hardware to guide low-overhead detection/correction schemes. In this vein, we developed low-overhead partial data replication schemes that exploit latency tolerance in GPUs. Overall, this data-centric approach dramatically improves GPGPU application resilience, with a minimal additional average performance overhead of 1.2% for detection-only and 3.4% for detection-and-correction.}
}


@inproceedings{DBLP:conf/dsn/0002HSVK21,
	author = {Timothy Tsai and
                  Siva Kumar Sastry Hari and
                  Michael B. Sullivan and
                  Oreste Villa and
                  Stephen W. Keckler},
	title = {NVBitFI: Dynamic Fault Injection for GPUs},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {284--291},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00041},
	doi = {10.1109/DSN48987.2021.00041},
	timestamp = {Tue, 10 Aug 2021 08:05:36 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/0002HSVK21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {GPUs have found wide acceptance in domains such as high-performance computing and autonomous vehicles, which require fast processing of large amounts of data along with provisions for reliability, availability, and safety. A key component of these dependability characteristics is the propagation of errors and their eventual effect on system outputs. In addition to analytical and simulation models, fault injection is an important technique that can evaluate the effect of errors on a complete computing system running the full software stack. However, the complexity of modern GPU systems and workloads challenges existing fault injection tools. Some tools require the recompilation of source code that may not be available, struggle to handle dynamic libraries, lack support for modern GPUs, or add unacceptable performance overheads. We introduce the NVBitFI tool for fault injection into GPU programs. In contrast with existing tools, NVBitFI performs instrumentation of code dynamically and selectively to instrument the minimal set of target dynamic kernels; as it requires no access to source code, NVBitFI provides improvements in performance and usability. The NVBitFI tool is publicly available for download and use at https://github.com/NVlabs/nvbitfi.}
}


@inproceedings{DBLP:conf/dsn/SantosCCRR21,
	author = {Fernando Fernandes dos Santos and
                  Josie E. Rodriguez Condia and
                  Luigi Carro and
                  Matteo Sonza Reorda and
                  Paolo Rech},
	title = {Revealing GPUs Vulnerabilities by Combining Register-Transfer and
                  Software-Level Fault Injection},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {292--304},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00042},
	doi = {10.1109/DSN48987.2021.00042},
	timestamp = {Sun, 02 Oct 2022 15:59:19 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/SantosCCRR21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {The complexity of both hardware and software makes GPUs reliability evaluation extremely challenging. A low level fault injection on a GPU model, despite being accurate, would take a prohibitively long time (months to years), while software fault injection, despite being quick, cannot access critical resources for GPUs and typically uses synthetic fault models (e.g., single bit-flips) that could result in unrealistic evaluations. This paper proposes to combine the accuracy of Register- Transfer Level (RTL) fault injection with the efficiency of software fault injection. First, on an RTL GPU model (FlexGripPlus), we inject over 1.5 million faults in low-level resources that are unprotected and hidden to the programmer, and characterize their effects on the output of common instructions. We create a pool of possible fault effects on the operation output based on the instruction opcode and input characteristics. We then inject these fault effects, at the application level, using an updated version of a software framework (NVBitFI). Our strategy reduces the fault injection time from the tens of years an RTL evaluation would need to tens of hours, thus allowing, for the first time on GPUs, to track the fault propagation from the hardware to the output of complex applications. Additionally, we provide a more realistic fault model and show that single bit-flip injection would underestimate the error rate of six HPC applications and two convolutional neural networks by up to 48parcent (18parcent on average). The RTL fault models and the injection framework we developed are made available in a public repository to enable third-party evaluations and ease results reproducibility.}
}


@inproceedings{DBLP:conf/dsn/TaherinPGLT21,
	author = {Amir Taherin and
                  Tirthak Patel and
                  Giorgis Georgakoudis and
                  Ignacio Laguna and
                  Devesh Tiwari},
	title = {Examining Failures and Repairs on Supercomputers with Multi-GPU Compute
                  Nodes},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {305--313},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00043},
	doi = {10.1109/DSN48987.2021.00043},
	timestamp = {Sun, 04 Aug 2024 19:40:42 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/TaherinPGLT21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Understanding the reliability characteristics of supercomputers has been a key focus of the HPC and dependability communities. However, there is no current study that analyzes both the failure and recovery characteristics over multiple generations of a GPU-based supercomputer with multiple GPUs on the same node. This paper bridges that gap and reveals surprising insights based on monitoring and analyzing the failures and repairs on the Tsubame-2 and Tsubame-3 supercomputers.}
}


@inproceedings{DBLP:conf/dsn/LachtarEBM21,
	author = {Nada Lachtar and
                  Abdulrahman Abu Elkhail and
                  Anys Bacha and
                  Hafiz Malik},
	title = {An Application Agnostic Defense Against the Dark Arts of Cryptojacking},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {314--325},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00044},
	doi = {10.1109/DSN48987.2021.00044},
	timestamp = {Tue, 21 Mar 2023 20:58:54 +0100},
	biburl = {https://dblp.org/rec/conf/dsn/LachtarEBM21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {The popularity of cryptocurrencies has garnered interest from cybercriminals, spurring an onslaught of cryptojacking campaigns that aim to hijack computational resources for the purpose of mining cryptocurrencies. In this paper, we present a cross-stack cryptojacking defense system that spans the hardware and OS layers. Unlike prior work that is confined to detecting cryptojacking behavior within web browsers, our solution is application agnostic. We show that tracking instructions that are frequently used in cryptographic hash functions serve as reliable signatures for fingerprinting cryptojacking activity. We demonstrate that our solution is resilient to multi-threaded and throttling evasion techniques that are commonly employed by cryptojacking malware. We characterize the robustness of our solution by extensively testing a diverse set of workloads that include real consumer applications. Finally, an evaluation of our proof-of-concept implementation shows minimal performance impact while running a mix of benchmark applications}
}


@inproceedings{DBLP:conf/dsn/SuDZ21,
	author = {Chao Su and
                  Xuhua Ding and
                  Qingkai Zeng},
	title = {Catch You With Cache: Out-of-VM Introspection to Trace Malicious Executions},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {326--337},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00045},
	doi = {10.1109/DSN48987.2021.00045},
	timestamp = {Mon, 19 Dec 2022 09:33:48 +0100},
	biburl = {https://dblp.org/rec/conf/dsn/SuDZ21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Out-of-VM introspection is an imperative part of security analysis. The legacy methods either modify the system, introducing enormous overhead, or rely heavily on hardware features, which are neither available nor practical in most cloud environments. In this paper, we propose a novel analysis method, named as Catcher, that utilizes CPU cache to perform out-of-VM introspection. Catcher does not make any modifications to the target program and its running environment, nor demands special hardware support. Implemented upon Linux KVM, it natively introspects the target’s virtual memory. More importantly, it uses the cache-based side channel to infer the target control flow. To deal with the inherent limitations of the side channel, we propose several heuristics to improve the accuracy and stability of Catcher. Our experiments against various malware armored with packing techniques show that Catcher can recover the control flow in real time with around 67% to 97% accuracy scores. Catcher incurs a negligible overhead to the system and can be launched at anytime to monitor an ongoing attack inside a virtual machine.}
}


@inproceedings{DBLP:conf/dsn/PangYXKPX21,
	author = {Chengbin Pang and
                  Ruotong Yu and
                  Dongpeng Xu and
                  Eric Koskinen and
                  Georgios Portokalidis and
                  Jun Xu},
	title = {Towards Optimal Use of Exception Handling Information for Function
                  Detection},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {338--349},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00046},
	doi = {10.1109/DSN48987.2021.00046},
	timestamp = {Thu, 23 Sep 2021 09:45:16 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/PangYXKPX21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Function entry detection is critical for security of binary code. Conventional methods heavily rely on patterns, inevitably missing true functions and introducing errors. Recently, call frames have been used in exception-handling for function start detection. However, existing methods have two problems. First, they combine call frames with heuristic-based approaches, which often brings error and uncertain benefits. Second, they trust the fidelity of call frames, without handling the errors that are introduced by call frames. In this paper, we first study the coverage and accuracy of existing approaches in detecting function starts using call frames. We found that although recursive disassembly with call frames can maximize coverage, using extra heuristic-based approaches does not improve coverage and actually hurts accuracy. Second, we unveil call-frame errors and develop the first approach to fix them, making their use more reliable.}
}


@inproceedings{DBLP:conf/dsn/ConnellyR0XWS21,
	author = {Joseph Connelly and
                  Taylor Roberts and
                  Xing Gao and
                  Jidong Xiao and
                  Haining Wang and
                  Angelos Stavrou},
	title = {CloudSkulk: {A} Nested Virtual Machine Based Rootkit and Its Detection},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {350--362},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00047},
	doi = {10.1109/DSN48987.2021.00047},
	timestamp = {Tue, 18 Jun 2024 20:16:47 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/ConnellyR0XWS21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {When attackers compromise a computer system and obtain root control over the victim system, retaining that control and avoiding detection become their top priority. To achieve this goal, various rootkits have been developed. However, existing rootkits are still easy to detect as long as defenders can gain control at a lower level, such as the operating system level, the hypervisor level, or the hardware level. In this paper, we present a new type of rootkit called CloudSkulk, which is a nested virtual machine (VM) based rootkit. While nested virtualization has attracted sufficient attention from the security and cloud community, to the best of our knowledge, we are the first to reveal and demonstrate how nested virtualization can be used by attackers to develop rootkits. We then, from defenders’ perspective, present a novel approach to detecting CloudSkulk rootkits at the host level. Our experimental results show that the proposed approach is effective in detecting CloudSkulk rootkits.}
}


@inproceedings{DBLP:conf/dsn/BhatKBG21,
	author = {Koustubha Bhat and
                  Erik van der Kouwe and
                  Herbert Bos and
                  Cristiano Giuffrida},
	title = {FIRestarter: Practical Software Crash Recovery with Targeted Library-level
                  Fault Injection},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {363--375},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00048},
	doi = {10.1109/DSN48987.2021.00048},
	timestamp = {Mon, 03 Jan 2022 22:27:55 +0100},
	biburl = {https://dblp.org/rec/conf/dsn/BhatKBG21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Despite advances in software testing, many bugs still plague deployed software, leading to crashes and thus service disruption in high-availability production applications. Existing crash recovery solutions are either limited to transient faults or require manual annotations to target predetermined persistent bugs. Moreover, existing solutions are generally inefficient, hindering practical deployment.In this paper, we present FIRestarter (Fault Injection-based Restarter), an efficient and automatic crash recovery solution for commodity user applications. To eliminate the need for manual annotations, FIRestarter injects targeted software faults at the library interface to automatically trigger error handling code for standard library calls already part of the application. In particular, when a crash occurs, we roll back the application state before the last recoverable library call, inject a fault, and restart execution forcing the call to immediately return a predetermined error code. This strategy allows the application to automatically bypass the crashing code upon such a restart and exploits existing error-handling code to recover from even persistent bugs. Moreover, since library calls lie pervasively throughout the code, our design provides a large recovery surface despite the automated approach. Finally, FIRestarter’s recovery windows are small and frequent compared to traditional checkpoint-restart, which enables new optimizations such as the ability to support rollback by means of hybrid hardware/software transactional memory instrumentation and improve performance. We apply FIRestarter to a number of event-driven server applications and show our solution achieves near-instantaneous, state-preserving crash recovery in the face of even persistent crashes. On popular web servers, our evaluation results show a recovery surface of at least 77%, with low performance overhead of at most 17%.}
}


@inproceedings{DBLP:conf/dsn/CayreGANKM21,
	author = {Romain Cayre and
                  Florent Galtier and
                  Guillaume Auriol and
                  Vincent Nicomette and
                  Mohamed Ka{\^{a}}niche and
                  G{\'{e}}raldine Vache Marconato},
	title = {WazaBee: attacking Zigbee networks by diverting Bluetooth Low Energy
                  chips},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {376--387},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00049},
	doi = {10.1109/DSN48987.2021.00049},
	timestamp = {Fri, 29 Jul 2022 21:55:23 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/CayreGANKM21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {This paper discusses the security of wireless communication protocols of the Internet of Things (IoT) and presents a new attack targeting these protocols, called WazaBee, which could have a critical impact and be difficult to detect. Specifically, WazaBee is a pivotal attack aimed at hijacking BLE devices, commonly used in IoT networks, in order to communicate with and possibly attack through a different wireless network technology, considering protocols based on 802.15.4, in particular Zigbee. We present the key principles of the attack and describe some real-world experiments that allowed us to demonstrate its practical feasibility. The attack takes advantage of the compatibility that exists between the two modulation techniques used by these two protocols. Finally, the paper briefly discusses possible countermeasures to mitigate the impact of this attack.}
}


@inproceedings{DBLP:conf/dsn/CayreGANKM21a,
	author = {Romain Cayre and
                  Florent Galtier and
                  Guillaume Auriol and
                  Vincent Nicomette and
                  Mohamed Ka{\^{a}}niche and
                  G{\'{e}}raldine Vache Marconato},
	title = {InjectaBLE: Injecting malicious traffic into established Bluetooth
                  Low Energy connections},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {388--399},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00050},
	doi = {10.1109/DSN48987.2021.00050},
	timestamp = {Fri, 29 Jul 2022 21:55:23 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/CayreGANKM21a.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Bluetooth Low Energy (BLE) is nowadays one of the most popular wireless communication protocols for Internet of Things (IoT) devices. As a result, several attacks have targeted this protocol or its implementations in recent years, illustrating the growing interest for this technology. However, some major challenges remain from an offensive perspective, such as injecting arbitrary frames, hijacking the Slave role or performing a Manin-The-Middle in an already established connection. In this paper, we describe a novel attack called InjectaBLE, allowing to inject malicious traffic into an existing connection. This attack is highly critical as the vulnerability exploited is inherent to the BLE specification itself, which means that any BLE connection can be possibly vulnerable, regardless of the BLE devices involved in the connection. We describe the theoretical foundations of the attack, how to implement it in practice, and we explore four critical attack scenarios allowing to maliciously trigger a specific feature of the target device, hijack the Slave and Master role or to perform a Man-in-the-Middle attack. Finally, we discuss the impact of this attack and outline some mitigation measures.}
}


@inproceedings{DBLP:conf/dsn/SpenskyMBOHGJKV21,
	author = {Chad Spensky and
                  Aravind Machiry and
                  Nathan Burow and
                  Hamed Okhravi and
                  Rick Housley and
                  Zhongshu Gu and
                  Hani Jamjoom and
                  Christopher Kruegel and
                  Giovanni Vigna},
	title = {Glitching Demystified: Analyzing Control-flow-based Glitching Attacks
                  and Defenses},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {400--412},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00051},
	doi = {10.1109/DSN48987.2021.00051},
	timestamp = {Mon, 09 Aug 2021 14:59:44 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/SpenskyMBOHGJKV21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Hardware fault injection, or glitching, attacks can compromise the security of devices even when no software vulnerabilities exist. Attempts to analyze the hardware effects of glitching are subject to the Heisenberg effect and there is typically a disconnect between what people “think” is possible and what is actually possible with respect to these attacks. In this work, we attempt to provide some clarity to the impacts of attacks and defenses for control-flow modification through glitching. First, we introduce a glitching emulation framework, which provides a scalable playground to test the effects of bit flips on specific instruction set architectures (ISAs) (i.e., the fault tolerance of the instruction encoding). Next, we examine real glitching experiments using the ChipWhisperer, a popular microcontroller using open-source glitching hardware. These real-world experiments provide novel insights into how glitching attacks are realized and might be defended against in practice. Finally, we present GLITCHRESISTOR, an open-source, software-based glitching defense tool that can automatically insert glitching defenses into any existing source code, in an architecture-independent way. We evaluated GLITCHRESISTOR, which integrates numerous software-only defenses against powerful and real-world glitching attacks. Our findings indicate that software-only defenses can be implemented with acceptable run-time and size overheads, while completely mitigating some single-glitch attacks, minimizing the likelihood of a successful multi-glitch attack (i.e., a success rate of 0.000306%), and detecting failed glitching attempts at a high rate (between 79.2% and 100%).}
}


@inproceedings{DBLP:conf/dsn/0004WCWLCWSCT21,
	author = {Weijie Liu and
                  Wenhao Wang and
                  Hongbo Chen and
                  Xiaofeng Wang and
                  Yaosong Lu and
                  Kai Chen and
                  Xinyu Wang and
                  Qintao Shen and
                  Yi Chen and
                  Haixu Tang},
	title = {Practical and Efficient in-Enclave Verification of Privacy Compliance},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {413--425},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00052},
	doi = {10.1109/DSN48987.2021.00052},
	timestamp = {Tue, 07 May 2024 20:05:31 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/0004WCWLCWSCT21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {A trusted execution environment (TEE) such as Intel Software Guard Extension (SGX) runs attestation to prove to a data owner the integrity of the initial state of an enclave, including the program to operate on her data. For this purpose, the data-processing program is supposed to be open to the owner or a trusted third party, so its functionality can be evaluated before trust being established. In the real world, however, increasingly there are application scenarios in which the program itself needs to be protected (e.g., proprietary algorithm). So its compliance with privacy policies as expected by the data owner should be verified without exposing its code.To this end, this paper presents DEFLECTION, a new model for TEE-based delegated and flexible in-enclave code verification. Given that the conventional solutions do not work well under the resource-limited and TCB-frugal TEE, we come up with a new design inspired by Proof-Carrying Code. Our design strategically moves most of the workload to the code generator, which is responsible for producing easy-to-check code, while keeping the consumer simple. Also, the whole consumer can be made public and verified through a conventional attestation. We implemented this model on Intel SGX and demonstrate that it introduces a very small part of TCB. We also thoroughly evaluated its performance on micro-and macro-benchmarks and real-world applications, showing that the design only incurs a small overhead when enforcing several categories of security policies.}
}


@inproceedings{DBLP:conf/dsn/MartinLGKSFF21,
	author = {Andr{\'{e}} Martin and
                  Cong Lian and
                  Franz Gregor and
                  Robert Krahn and
                  Valerio Schiavoni and
                  Pascal Felber and
                  Christof Fetzer},
	title = {{ADAM-CS:} Advanced Asynchronous Monotonic Counter Service},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {426--437},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00053},
	doi = {10.1109/DSN48987.2021.00053},
	timestamp = {Sat, 30 Sep 2023 09:39:08 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/MartinLGKSFF21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Trusted execution environments (TEEs) offer the technological breakthrough to allow several applications to be deployed and executed over untrusted public cloud environments. Although TEEs (e. g., Intel SGX, ARM TrustZone, AMD SEV) provide several mechanisms to ensure confidentiality and integrity of data and code, they do not offer freshness out of the box, a critical aspect yet often overlooked, for instance, to protect against rollback attacks. Monotonic counters are a popular way to detect rollbacks, as their counter values cannot be decremented. However, counter increments are slow (i.e., 10 th of milliseconds), making their use impractical for distributed services and applications processing thousands of transactions simultaneously, for which an order of magnitude improvement is needed. ADAM-CS is an asynchronous monotonic counter service to protect such high-traffic applications against rollback attacks. Leveraging a set of distributed monotonic counters and specific algorithms, ADAM-CS minimizes the maximum vulnerability window (MVW), i.e., the amount of transactions an adversary could successfully rollback. Thanks to its asynchronous nature, ADAM-CS supports thousands of increments per second without introducing additional latency in the transactions performed by applications. Our measurements indicate that we can keep the MVW well below 10ms while supporting a throughput of more than 21K requests/s when using eight counters.}
}


@inproceedings{DBLP:conf/dsn/FuhryAK21,
	author = {Benny Fuhry and
                  Jayanth Jain H. A and
                  Florian Kerschbaum},
	title = {EncDBDB: Searchable Encrypted, Fast, Compressed, In-Memory Database
                  Using Enclaves},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {438--450},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00054},
	doi = {10.1109/DSN48987.2021.00054},
	timestamp = {Sun, 02 Oct 2022 15:59:18 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/FuhryAK21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Data confidentiality is an important requirement for clients when outsourcing databases to the cloud. Trusted execution environments, such as Intel SGX, offer an efficient solution to this confidentiality problem. However, existing TEE-based solutions are not optimized for column-oriented, in-memory databases and pose impractical memory requirements on the enclave. We present EncDBDB, a novel approach for client-controlled encryption of a column-oriented, in-memory databases allowing range searches using an enclave. EncDBDB offers nine encrypted dictionaries, which provide different security, performance, and storage efficiency tradeoffs for the data. It is especially suited for complex, read-oriented, analytic queries as present, e.g., in data warehouses. The computational overhead compared to plaintext processing is within a millisecond even for databases with millions of entries and the leakage is limited. Compressed encrypted data requires less space than a corresponding plaintext column. Furthermore, EncDBDB’s enclave is very small reducing the potential for security-relevant implementation errors and side-channel leakages.}
}


@inproceedings{DBLP:conf/dsn/SalakoSZ21,
	author = {Kizito Salako and
                  Lorenzo Strigini and
                  Xingyu Zhao},
	title = {Conservative Confidence Bounds in Safety, from Generalised Claims
                  of Improvement {\&} Statistical Evidence},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {451--462},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00055},
	doi = {10.1109/DSN48987.2021.00055},
	timestamp = {Thu, 14 Oct 2021 10:18:12 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/SalakoSZ21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {“Proven-in-use”, “globally-at-least-equivalent”, “stress-tested”, are concepts that come up in diverse contexts in acceptance, certification or licensing of critical systems. Their common feature is that dependability claims for a system in a certain operational environment are supported, in part, by evidence – viz of successful operation – concerning different, though related, system[s] and/or environment[s], together with an auxiliary argument that the target system/environment offers the same, or improved, safety. We propose a formal probabilistic (Bayesian) organisation for these arguments. Through specific examples of evidence for the “improvement” argument above, we demonstrate scenarios in which formalising such arguments substantially increases confidence in the target system, and show why this is not always the case. Example scenarios concern vehicles and nuclear plants. Besides supporting stronger claims, the mathematical formalisation imposes precise statements of the bases for “improvement” claims: seemingly similar forms of prior beliefs are sometimes revealed to imply substantial differences in the claims they can support.}
}


@inproceedings{DBLP:conf/dsn/00020KBB21,
	author = {Shahid Khan and
                  Matthias Volk and
                  Joost{-}Pieter Katoen and
                  Alexis Braibant and
                  Marc Bouissou},
	title = {Model Checking the Multi-Formalism Language {FIGARO}},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {463--470},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00056},
	doi = {10.1109/DSN48987.2021.00056},
	timestamp = {Mon, 09 Aug 2021 14:59:44 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/00020KBB21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {This paper presents a probabilistic model-checking tool for FIGARO, a multi-formalism modelling language that includes e.g., generalised stochastic Petri nets, Boolean-logic driven Markov processes, telecommunication networks, dynamic reliability block diagrams, process diagrams, and electric circuits. FIGARO has been developed and maintained by EDF for the analysis of system dependability such as reliability, availability and maintainability. We present a probabilistic model-checking tool for FIGARO models. It combines efficient, fully automated verification algorithms with numerical analysis techniques. Whereas the existing FIGARO tools, the Monte Carlo simulator YAMS and the most-probable-sequence explorer FiGSEQ, provide respectively statistical guarantees and upper bounds for unreliability and unavailability, our tool provides hard guarantees: its results are correct up to a given numerical accuracy. The key ingredient is the tool-component FiGAROAPI that enables the state-space generation for FIGARO models thus facilitating model checking. This paper describes the details of FiGAROAPI and empirically evaluates the feasibility and merits of the proposed framework. FiGAROAPI leverages upon the state-of-the-art STORM model checker as back-end, and it can model check various types of formalism in their FIGARO representation.}
}


@inproceedings{DBLP:conf/dsn/TaylorCQS21,
	author = {Max Taylor and
                  Haicheng Chen and
                  Feng Qin and
                  Christopher Stewart},
	title = {Avis: In-Situ Model Checking for Unmanned Aerial Vehicles},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {471--483},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00057},
	doi = {10.1109/DSN48987.2021.00057},
	timestamp = {Mon, 03 Jan 2022 22:27:55 +0100},
	biburl = {https://dblp.org/rec/conf/dsn/TaylorCQS21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Control firmware in unmanned aerial vehicles (UAVs) uses sensors to model and manage flight operations, from takeoff to landing to flying between waypoints. However, sensors can fail at any time during a flight. If control firmware mishandles sensor failures, UAVs can crash, fly away, or suffer other unsafe conditions. In-situ model checking finds sensor failures that could lead to unsafe conditions by systematically failing sensors. However, the type of sensor failure and its timing within a flight affect its manifestation, creating a large search space. We propose Avis, an in-situ model checker to quickly uncover UAV sensor failures that lead to unsafe conditions. Avis exploits operating modes, i.e., a label that maps software execution to corresponding flight operations. Widely used control firmware already support operating modes. Avis injects sensor failures as the control firmware transitions between modes – a key execution point where mishandled software exceptions can trigger unsafe conditions. We implemented Avis and applied it to ArduPilot and PX4. Avis found unsafe conditions 2.4X faster than Bayesian Fault Injection, the leading, state-of-theart approach. Within the current code base of ArduPilot and PX4, Avis discovered 10 previously unknown software bugs that lead to unsafe conditions. Additionally, we reinserted 5 known bugs that caused serious, unsafe conditions and Avis correctly reported all of them.}
}


@inproceedings{DBLP:conf/dsn/ZhouAAAA21,
	author = {Xugui Zhou and
                  Bulbul Ahmed and
                  James H. Aylor and
                  Philip Asare and
                  Homa Alemzadeh},
	title = {Data-driven Design of Context-aware Monitors for Hazard Prediction
                  in Artificial Pancreas Systems},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {484--496},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00058},
	doi = {10.1109/DSN48987.2021.00058},
	timestamp = {Sun, 04 Aug 2024 19:40:43 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/ZhouAAAA21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Medical Cyber-physical Systems (MCPS) are vulnerable to accidental or malicious faults that can target their controllers and cause safety hazards and harm to patients. This paper proposes a combined model and data-driven approach for designing context-aware monitors that can detect early signs of hazards and mitigate them in MCPS. We present a framework for formal specification of unsafe system context using Signal Temporal Logic (STL) combined with an optimization method for patient-specific refinement of STL formulas based on real or simulated faulty data from the closed-loop system for the generation of monitor logic. We evaluate our approach in simulation using two state-of-the-art closed-loop Artificial Pancreas Systems (APS). The results show the context-aware monitor achieves up to 1.4 times increase in average hazard prediction accuracy (F1score) over several baseline monitors, reduces false-positive and false-negative rates, and enables hazard mitigation with a 54% success rate while decreasing the average risk for patients.}
}


@inproceedings{DBLP:conf/dsn/PourWB21,
	author = {Morteza Safaei Pour and
                  Dylan Watson and
                  Elias Bou{-}Harb},
	title = {Sanitizing the IoT Cyber Security Posture: An Operational {CTI} Feed
                  Backed up by Internet Measurements},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {497--506},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00059},
	doi = {10.1109/DSN48987.2021.00059},
	timestamp = {Sat, 09 Apr 2022 12:43:02 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/PourWB21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {The Internet-of-Things (IoT) paradigm at large continues to be compromised, hindering the privacy, dependability, security, and safety of our nations. While the operational security communities (i.e., CERTS, SOCs, CSIRT, etc.) continue to develop capabilities for monitoring cyberspace, tools which are IoT-centric remain at its infancy. To this end, we address this gap by innovating an actionable Cyber Threat Intelligence (CTI) feed related to Internet-scale infected IoT devices. The feed analyzes, in near real-time, 3.6TB of daily streaming passive measurements (\n≈\n1M pps) by applying a custom-developed learning methodology to distinguish between compromised IoT devices and non-IoT nodes, in addition to labeling the type and vendor. The feed is augmented with third party information to provide contextual information. We report on the operation, analysis, and shortcomings of the feed executed during an initial deployment period. We make the CTI feed available for ingestion through a public, authenticated API and a front-end platform.}
}


@inproceedings{DBLP:conf/dsn/EtigowniLZB21,
	author = {Sriharsha Etigowni and
                  Sizhuang Liang and
                  Saman A. Zonouz and
                  Raheem Beyah},
	title = {Physics-Aware Security Monitoring against Structural Integrity Attacks
                  in 3D Printers},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {507--518},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00060},
	doi = {10.1109/DSN48987.2021.00060},
	timestamp = {Mon, 09 Aug 2021 14:59:44 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/EtigowniLZB21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {STereoLithography (STL) files describe the geometry of objects to be printed in additive manufacturing. Previous studies have shown that the STL files that describe functional objects can be attacked such that the objects appear normal during inspection, but fail during operation. Such attacks lead to damage to systems that use the objects and possibly loss of life. The detection of any defects caused due to the attacks nowadays is limited to the quality control process after the objects are manufactured.We present a Trusted Integrity Verifier (TIV) to detect such attacks on 3D printed objects in the early stage of the manufacturing process. These type of new attacks cannot be detected by traditional software security mechanisms since they only focus on the printers and do not consider the inputs (STL design files) to the printer. Early detection of attacks prevents from printing malicious objects resulting in saving time, resources and manufacturing efforts. TIV detects malicious STL files using multidisciplinary approaches unlike the traditional integrity verification techniques. TIV develops a void detection module based on computer vision techniques to identify the internal defects such as voids. Some of these features could be from the design and some could be due to the attack. To differentiate the malicious features from the design features, TIV develops safety verification module based on a numerical method. TIV’s safety verification module is used to differentiate the malicious features from the design features by calculating the load bearing mechanical stress on the objects. These mechanical stresses are compared to the safety operational conditions to determine if the printed object will break or fail during its normal operation.To illustrate TIV’s generality and scalability, we conducted a large-scale analysis on 16,000 real-world 3D print STL files. TIV verified the STL files successfully as either safe or malicious with high accuracy of 92% for object classification and 96.5% for void detection.}
}


@inproceedings{DBLP:conf/dsn/HeRA21,
	author = {Zhengxian He and
                  Mohit Narayan Rajput and
                  Mustaque Ahamad},
	title = {Compromised Computers Meet Voice Assistants: Stealthily Exfiltrating
                  Data as Voice over Telephony},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {519--530},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00061},
	doi = {10.1109/DSN48987.2021.00061},
	timestamp = {Mon, 09 Aug 2021 14:59:44 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/HeRA21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {New security concerns arise due to the growing popularity of voice assistants (VA) in home and enterprise networks. We explore how malware infected computers can encode sensitive data into audio and leverage nearby VAs to exfiltrate it. Such low cost attacks can be launched remotely, at scale, and can bypass network defenses. By using Dual-Tone Multi-Frequency tones to encode data into audio that is played over ordinary computer speakers, modest amounts of data (e.g., a kilobyte) can be transmitted with a phone call lasting a few minutes. This can be done while making the audio nearly inaudible for most people. With the help of a prototype built by us, we experimentally assess the impact of several factors that impact data transfer rates and transmission accuracy achieved by such attacks. Our results show that voice assistants in the vicinity of computers can pose new threats to data stored on them.}
}


@inproceedings{DBLP:conf/dsn/AhmedHNDS21,
	author = {Alif Ahmed and
                  Jason D. Hiser and
                  Anh Nguyen{-}Tuong and
                  Jack W. Davidson and
                  Kevin Skadron},
	title = {BigMap: Future-proofing Fuzzers with Efficient Large Maps},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {531--542},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00062},
	doi = {10.1109/DSN48987.2021.00062},
	timestamp = {Sun, 04 Aug 2024 19:40:43 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/AhmedHNDS21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Coverage-guided fuzzing is a powerful technique for finding security vulnerabilities and latent bugs in software. Such fuzzers usually store the coverage information in a small bitmap. Hash collision within this bitmap is a well-known issue and can reduce fuzzers’ ability to discover potential bugs. Prior works noted that collision mitigation with naïvely enlarging the hash space leads to an unacceptable runtime overhead. This paper describes BigMap, a two-level hashing scheme that enables using an arbitrarily large coverage_bitmap with low overhead. The key observation is that the overhead stems from frequent operations performed on the full bitmap, although only a fraction of the map is actively used. BigMap condenses these scattered active regions on a second bitmap and limits the operations only on that condensed area. We implemented our approach on top of the popular fuzzer AFL and conducted experiments on 19 benchmarks from FuzzBench and OSS-Fuzz. The results indicate that BigMap does not suffer from increased runtime overhead even with large map sizes. Compared to AFL, BigMap achieved an average of 4.5x higher test case generation throughput for a 2MB map and 33.1x for an 8MB map. The throughput gain for the 2MB map increased further to 9.2x with parallel fuzzing sessions, indicating superior scalability of BigMap. More importantly, BigMap’s compatibility with most coverage metrics, along with its efficiency on bigger maps, enabled exploring aggressive compositions of expensive coverage metrics and fuzzing algorithms, uncovering 33% more unique crashes. BigMap makes using large bitmaps practical and enables researchers to explore a wider design space of coverage metrics}
}


@inproceedings{DBLP:conf/dsn/WuGDC21,
	author = {Daoyuan Wu and
                  Debin Gao and
                  Robert H. Deng and
                  Rocky K. C. Chang},
	title = {When Program Analysis Meets Bytecode Search: Targeted and Efficient
                  Inter-procedural Analysis of Modern Android Apps in BackDroid},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {543--554},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00063},
	doi = {10.1109/DSN48987.2021.00063},
	timestamp = {Mon, 03 Jan 2022 22:27:55 +0100},
	biburl = {https://dblp.org/rec/conf/dsn/WuGDC21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Widely-used Android static program analysis tools, e.g., Amandroid and FlowDroid, perform the whole-app inter-procedural analysis that is comprehensive but fundamentally difficult to handle modern (large) apps. The average app size has increased three to four times over five years. In this paper, we explore a new paradigm of targeted inter-procedural analysis that can skip irrelevant code and focus only on the flows of security-sensitive sink APIs. To this end, we propose a technique called on-the-fly bytecode search, which searches the disassembled app bytecode text just in time when a caller needs to be located. In this way, it guides targeted (and backward) inter-procedural analysis step by step until reaching entry points, without relying on a whole-app graph. Such search-based inter-procedural analysis, however, is challenging due to Java polymorphism, callbacks, asynchronous flows, static initializers, and inter-component communication in Android apps. We overcome these unique obstacles in our context by proposing a set of bytecode search mechanisms that utilize flexible searches and forward object taint analysis. Atop this new inter-procedural analysis, we further adjust the traditional backward slicing and forward constant propagation to provide the complete dataflow tracking of sink API calls. We have implemented a prototype called BackDroid and compared it with Amandroid in analyzing 3,178 modern popular apps for crypto and SSL misconfigurations. The evaluation shows that for such sink-based problems, BackDroid is 37 times faster (2.13v.s. 78.15 minutes) and has no timed-out failure (v.s. 35% in Amandroid) while maintaining close or even better detection effectiveness.}
}


@inproceedings{DBLP:conf/dsn/BorrelloCD21,
	author = {Pietro Borrello and
                  Emilio Coppa and
                  Daniele Cono D'Elia},
	title = {Hiding in the Particles: When Return-Oriented Programming Meets Program
                  Obfuscation},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {555--568},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00064},
	doi = {10.1109/DSN48987.2021.00064},
	timestamp = {Sat, 30 Sep 2023 09:39:07 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/BorrelloCD21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {Largely known for attack scenarios, code reuse techniques at a closer look reveal properties that are appealing also for program obfuscation. We explore the popular return-oriented programming paradigm under this light, transforming program functions into ROP chains that coexist seamlessly with the surrounding software stack. We show how to build chains that can withstand popular static and dynamic deobfuscation approaches, evaluating the robustness and overheads of the design over common programs. The results suggest a significant amount of computational resources would be required to carry a deobfuscation attack for secret finding and code coverage goals.}
}


@inproceedings{DBLP:conf/dsn/MoogD0F21,
	author = {Marvin Moog and
                  Markus Demmel and
                  Michael Backes and
                  Aurore Fass},
	title = {Statically Detecting JavaScript Obfuscation and Minification Techniques
                  in the Wild},
	booktitle = {51st Annual {IEEE/IFIP} International Conference on Dependable Systems
                  and Networks, {DSN} 2021, Taipei, Taiwan, June 21-24, 2021},
	pages = {569--580},
	publisher = {{IEEE}},
	year = {2021},
	url = {https://doi.org/10.1109/DSN48987.2021.00065},
	doi = {10.1109/DSN48987.2021.00065},
	timestamp = {Mon, 09 Aug 2021 14:59:44 +0200},
	biburl = {https://dblp.org/rec/conf/dsn/MoogD0F21.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	abstract = {JavaScript is both a popular client-side programming language and an attack vector. While malware developers transform their JavaScript code to hide its malicious intent and impede detection, well-intentioned developers also transform their code to, e.g., optimize website performance. In this paper, we conduct an in-depth study of code transformations in the wild. Specifically, we perform a static analysis of JavaScript files to build their Abstract Syntax Tree (AST), which we extend with control and data flows. Subsequently, we define two classifiers, benefitting from AST-based features, to detect transformed samples along with specific transformation techniques. Besides malicious samples, we find that transforming code is increasingly popular on Node.js libraries and client-side JavaScript, with, e.g., 90% of Alexa Top 10k websites containing a transformed script. This way, code transformations are no indicator of maliciousness. Finally, we showcase that benign code transformation techniques and their frequency both differ from the prevalent malicious ones.}
}
